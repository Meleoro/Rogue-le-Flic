//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.2
//     from Assets/InputSystem/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Character"",
            ""id"": ""131b0bb3-60b7-4b40-8852-b5999cbce9d6"",
            ""actions"": [
                {
                    ""name"": ""Movements"",
                    ""type"": ""Value"",
                    ""id"": ""155c9a1e-cd2c-4990-9f32-d2848ce209cd"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Tir"",
                    ""type"": ""Button"",
                    ""id"": ""855400ff-3eb1-4a6f-bdf8-30dcb59db666"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Enter"",
                    ""type"": ""Button"",
                    ""id"": ""63b2acc3-36d4-402f-a4ce-3b7067cff890"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""8e4cb25b-1ac9-4440-92d7-b7fe4f857d95"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""9d0e1599-9f11-4b2e-9b9a-6ced39ac6f48"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Movements"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""22680f2d-a6f3-47d1-86e2-f7c568c7da38"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""20c3eb80-36cb-463f-8886-d540aad14e85"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""09a74402-a666-44e1-ad7d-a217e03d4ec4"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""dfe39a5d-0e03-46ec-80d2-7ead39042a37"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""Movements"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""0c9c3c2d-73f6-4fa6-bdbe-764af8dff296"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""Tir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""caf1eea5-6894-4c0f-ae45-f1841c37147c"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""Enter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f1e9a425-7ebe-4f46-ba8b-bd88574d89da"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Character"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Character"",
            ""bindingGroup"": ""Character"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Character
        m_Character = asset.FindActionMap("Character", throwIfNotFound: true);
        m_Character_Movements = m_Character.FindAction("Movements", throwIfNotFound: true);
        m_Character_Tir = m_Character.FindAction("Tir", throwIfNotFound: true);
        m_Character_Enter = m_Character.FindAction("Enter", throwIfNotFound: true);
        m_Character_MousePosition = m_Character.FindAction("MousePosition", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Character
    private readonly InputActionMap m_Character;
    private ICharacterActions m_CharacterActionsCallbackInterface;
    private readonly InputAction m_Character_Movements;
    private readonly InputAction m_Character_Tir;
    private readonly InputAction m_Character_Enter;
    private readonly InputAction m_Character_MousePosition;
    public struct CharacterActions
    {
        private @Controls m_Wrapper;
        public CharacterActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Movements => m_Wrapper.m_Character_Movements;
        public InputAction @Tir => m_Wrapper.m_Character_Tir;
        public InputAction @Enter => m_Wrapper.m_Character_Enter;
        public InputAction @MousePosition => m_Wrapper.m_Character_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_Character; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterActions set) { return set.Get(); }
        public void SetCallbacks(ICharacterActions instance)
        {
            if (m_Wrapper.m_CharacterActionsCallbackInterface != null)
            {
                @Movements.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovements;
                @Movements.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovements;
                @Movements.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMovements;
                @Tir.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnTir;
                @Tir.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnTir;
                @Tir.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnTir;
                @Enter.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnEnter;
                @Enter.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnEnter;
                @Enter.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnEnter;
                @MousePosition.started -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_CharacterActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_CharacterActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Movements.started += instance.OnMovements;
                @Movements.performed += instance.OnMovements;
                @Movements.canceled += instance.OnMovements;
                @Tir.started += instance.OnTir;
                @Tir.performed += instance.OnTir;
                @Tir.canceled += instance.OnTir;
                @Enter.started += instance.OnEnter;
                @Enter.performed += instance.OnEnter;
                @Enter.canceled += instance.OnEnter;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public CharacterActions @Character => new CharacterActions(this);
    private int m_CharacterSchemeIndex = -1;
    public InputControlScheme CharacterScheme
    {
        get
        {
            if (m_CharacterSchemeIndex == -1) m_CharacterSchemeIndex = asset.FindControlSchemeIndex("Character");
            return asset.controlSchemes[m_CharacterSchemeIndex];
        }
    }
    public interface ICharacterActions
    {
        void OnMovements(InputAction.CallbackContext context);
        void OnTir(InputAction.CallbackContext context);
        void OnEnter(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
}
